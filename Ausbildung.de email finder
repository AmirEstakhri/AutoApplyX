from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import time
import os

# Setup
options = Options()
options.add_argument("--start-maximized")
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

# Load the Ausbildung.de homepage
url = "https://www.ausbildung.de/"
driver.get(url)
time.sleep(3)

# Search process
try:
    search_input = WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.ID, "main-search-bar-what"))
    )
    search_input.clear()
    search_input.send_keys("Fachinformatiker/in")
    time.sleep(1)
    search_input.send_keys(Keys.ENTER)
    print("‚úÖ Search initiated.")

    # Wait for the infinite scroll outer div that holds job cards
    scroll_outer = WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.CLASS_NAME, "infinite-scroll-component__outerdiv"))
    )
    print("‚úÖ Infinite scroll container loaded.")
except Exception as e:
    print(f"‚ùå Error during search: {e}")
    driver.quit()
    exit()
import math

last_height = driver.execute_script("return document.body.scrollHeight")
same_height_counter = 0

while True:
    # Scroll to bottom
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    time.sleep(2)

    # Get new scroll height
    new_height = driver.execute_script("return document.body.scrollHeight")

    # If no change in scroll height
    if new_height == last_height:
        same_height_counter += 1

        # Try clicking "Mehr Ergebnisse laden"
        try:
            load_more_btn = driver.find_element(By.XPATH, "//button[contains(text(), 'Mehr Ergebnisse laden')]")
            if load_more_btn.is_displayed():
                print("üîÑ Clicking 'Mehr Ergebnisse laden' button...")
                driver.execute_script("arguments[0].click();", load_more_btn)
                time.sleep(5)
                same_height_counter = 0  # reset after clicking
        except:
            print("‚úÖ No more 'Mehr Ergebnisse laden' button found.")

        # If scrolling and button both fail to load more
        if same_height_counter >= 2:
            print("‚úÖ All jobs loaded. Exiting scroll loop.")
            break
    else:
        same_height_counter = 0  # reset if scroll caused more loading

    last_height = new_height



# Find all job cards inside the scroll container
try:
    job_cards = scroll_outer.find_elements(By.CSS_SELECTOR, "article.JobPostingCard_cardWrapper__SAt4K")
    print(f"‚úÖ Found {len(job_cards)} job cards.")
except Exception as e:
    print(f"‚ùå Failed to locate job cards: {e}")
    driver.quit()
    exit()

# Collect job links
job_links = []
for card in job_cards:
    try:
        link_element = card.find_element(By.CSS_SELECTOR, "a[href^='/stellen/']")
        href = link_element.get_attribute("href")
        if href:
            full_link = href if href.startswith("http") else "https://www.ausbildung.de" + href
            job_links.append(full_link)
    except:
        continue


print(f"üîç Extracted {len(job_links)} job links.")

# Process all job links and collect all unique emails
results = []
visited_emails = set()
processed = 0

for link in job_links:


    driver.get(link)

    # Wait for the job title or fallback
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "h1.jp-title__title"))
        )
    except:
        time.sleep(2)

    processed += 1
    print(f"\nüîé Processing job {processed}: {link}")

    email = None

    # Try clicking "Weitere Bewerbungsoptionen"
    try:
        more_options = driver.find_elements(By.CLASS_NAME, "js-application-button--more-options")
        if more_options:
            more_options[0].click()
            time.sleep(1)
    except:
        pass

    # Try to get email from first method
    try:
        email_tags = driver.find_elements(By.ID, "t-link-email-application")
        for tag in email_tags:
            href = tag.get_attribute("href")
            if href and href.startswith("mailto:"):
                email = href.replace("mailto:", "").split("?")[0].strip()
                break
    except:
        pass

    # Try alternative email location
    if not email:
        try:
            alt_email_tags = driver.find_elements(By.CSS_SELECTOR, "div.first-level-application__content a.js-application-button--email")
            for tag in alt_email_tags:
                href = tag.get_attribute("href")
                if href and href.startswith("mailto:"):
                    email = href.replace("mailto:", "").split("?")[0].strip()
                    break
        except:
            pass

    if not email:
        print("‚ùå No email found.")
        continue
    if email in visited_emails:
        print("‚ö†Ô∏è Duplicate email, skipped.")
        continue

    visited_emails.add(email)

    # Extract job title and company
    try:
        title = driver.find_element(By.CSS_SELECTOR, "h1.jp-title__title").text.strip()
    except:
        title = "Unknown Title"

    try:
        company = driver.find_element(By.CSS_SELECTOR, "h2.title--left a").text.strip()
    except:
        company = "Unknown Company"

    print(f"üìß {email} | üè¢ {company} | üìÑ {title}")
    results.append(f"Email: {email}\nCompany: {company}\nTitle: {title}\nLink: {link}\n")

# Save results
output_path = os.path.join(os.getcwd(), "emails_from_ausbildung.txt")
with open(output_path, "w", encoding="utf-8") as f:
    f.write("\n".join(results))

print(f"\n‚úÖ Saved {len(results)} unique emails to: {output_path}")
driver.quit()
